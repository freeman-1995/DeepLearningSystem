1
00:00:00,000 --> 00:00:05,720
哈喽大家好

2
00:00:05,720 --> 00:00:07,320
今天下班的特别晚

3
00:00:07,320 --> 00:00:08,760
11点多才下班

4
00:00:08,760 --> 00:00:11,840
洗完澡现在已经凌晨了

5
00:00:11,840 --> 00:00:14,880
今天带来计算图的最后一节

6
00:00:14,880 --> 00:00:17,720
就是计算图的挑战和未来

7
00:00:18,200 --> 00:00:22,280
昨天我收到有几位同学给我来的一个私信

8
00:00:22,280 --> 00:00:26,120
说计算图与控制流表达这个概念

9
00:00:26,240 --> 00:00:28,240
或者这个内容有点难

10
00:00:28,240 --> 00:00:29,040
这个没关系

11
00:00:29,040 --> 00:00:30,280
可以多看一下

12
00:00:30,280 --> 00:00:34,080
计算图对控制流的表达是计算图里面

13
00:00:34,080 --> 00:00:35,840
最核心的一个概念

14
00:00:36,360 --> 00:00:38,440
今天来聊聊轻松的话题

15
00:00:38,440 --> 00:00:40,440
就是计算图遇到的一些挑战

16
00:00:40,440 --> 00:00:41,600
那引起一些思考

17
00:00:41,600 --> 00:00:43,840
还有它未来会走向哪个方向

18
00:00:43,840 --> 00:00:45,440
一起来畅想一下

19
00:00:45,440 --> 00:00:48,960
或者一起来碰撞一下这个idea

20
00:00:50,200 --> 00:00:52,200
首先来回顾一下计算图

21
00:00:52,200 --> 00:00:56,000
实际上计算图自动微分是通过有向无环图

22
00:00:56,000 --> 00:00:58,920
去构建一个反向的有向无环图

23
00:00:59,040 --> 00:01:01,840
从而去表达自动微分的内容的

24
00:01:02,720 --> 00:01:04,920
计算图主要是由节点边

25
00:01:04,920 --> 00:01:06,760
然后组织成他们的关系

26
00:01:06,760 --> 00:01:10,520
所以可以把计算图同时也叫做数据流图

27
00:01:11,320 --> 00:01:13,440
计算图的出现有两个好处

28
00:01:13,440 --> 00:01:15,640
第一个就是带来一个统一的表示

29
00:01:15,640 --> 00:01:19,680
向上可以统一一些前端语言的接口的表示

30
00:01:20,760 --> 00:01:22,400
统一了向上的表示

31
00:01:22,400 --> 00:01:24,840
向下就可以做一些很多的优化

32
00:01:24,840 --> 00:01:27,320
可以做一些数据流的简化

33
00:01:27,400 --> 00:01:29,720
动态图和静态图内存的优化

34
00:01:29,720 --> 00:01:32,200
还有改善算子之间的调度

35
00:01:32,880 --> 00:01:34,360
还有执行的性能

36
00:01:35,560 --> 00:01:37,480
下面还有另外两个好处

37
00:01:37,480 --> 00:01:40,400
就是它分层解耦便于后面的扩展

38
00:01:40,400 --> 00:01:42,000
就是有了计算图之后

39
00:01:42,120 --> 00:01:44,560
我就可以对优化层单独优化

40
00:01:44,560 --> 00:01:46,360
我对运行时单独优化

41
00:01:46,360 --> 00:01:48,360
我对底层库单独优化

42
00:01:48,360 --> 00:01:51,760
方便底层不断的进行个人优化

43
00:01:51,760 --> 00:01:53,880
为的就是让跑的更快

44
00:01:53,880 --> 00:01:55,040
训练的更快

45
00:01:55,040 --> 00:01:56,400
训练的更爽

46
00:01:57,200 --> 00:02:00,520
AI框架一定要有明确的分层解耦吗

47
00:02:00,520 --> 00:02:02,160
就是我一定要分层解耦

48
00:02:02,160 --> 00:02:04,800
才能够变成一个很好的AI框架吗

49
00:02:04,800 --> 00:02:08,360
谁告诉AI框架就该长这个样子呢

50
00:02:08,880 --> 00:02:11,360
就好像Pytorch它没有这么多层

51
00:02:11,360 --> 00:02:13,920
为什么Pytorch会这么成功呢

52
00:02:14,240 --> 00:02:16,480
它的统一表达其实是很简单的

53
00:02:16,480 --> 00:02:17,840
只是一个基本的概念

54
00:02:17,840 --> 00:02:20,560
通过表达式追踪就是trace的方式

55
00:02:20,560 --> 00:02:22,240
去变成计算图

56
00:02:22,240 --> 00:02:24,240
然后去直接调内核代码了

57
00:02:24,640 --> 00:02:26,240
它没有这么多分层解耦

58
00:02:26,240 --> 00:02:27,840
为什么它会这么成功

59
00:02:27,840 --> 00:02:30,920
为什么AI框架AI系统就一定要

60
00:02:30,920 --> 00:02:32,920
计算图这个概念呢

61
00:02:34,040 --> 00:02:35,960
所以这个是值得思考的

62
00:02:35,960 --> 00:02:38,800
第二个就是面向新的一些网络模型

63
00:02:38,800 --> 00:02:41,480
例如Diffusion Model或者Transformer

64
00:02:41,480 --> 00:02:44,280
这些新的结构底层优化

65
00:02:44,280 --> 00:02:46,440
应该走向哪些方向呢

66
00:02:46,440 --> 00:02:48,600
计算图需不需要修改呢

67
00:02:48,960 --> 00:02:51,200
还有就是最后一个问题就是

68
00:02:51,200 --> 00:02:54,600
计算图不能解决哪些AI业务呢

69
00:02:54,800 --> 00:02:57,760
因为既然对上层进行抽象

70
00:02:57,760 --> 00:03:00,560
有没有一些AI业务或者AI场景

71
00:03:00,560 --> 00:03:03,760
没办法抽象出来变成一个计算图

72
00:03:03,760 --> 00:03:06,640
从而没办法去表示这种神经网络呢

73
00:03:07,640 --> 00:03:09,040
这是值得思考的

74
00:03:09,040 --> 00:03:11,080
也希望跟大家一起去探讨

75
00:03:11,080 --> 00:03:14,120
至少这几个问题我是没有想清楚的

76
00:03:15,320 --> 00:03:18,560
下面来看一看第一个观点就是图

77
00:03:18,560 --> 00:03:22,200
图神经网络在互联网或者搜索推荐

78
00:03:22,200 --> 00:03:24,040
还有一些知识图谱的构建

79
00:03:24,360 --> 00:03:25,920
其实是非常常用的

80
00:03:25,920 --> 00:03:28,160
因为都可以表示成一个图

81
00:03:28,160 --> 00:03:31,920
但是图神经网络真的适合图的表示吗

82
00:03:31,920 --> 00:03:33,840
现在有了计算图

83
00:03:33,840 --> 00:03:36,960
希望通过图神经网络进行表达

84
00:03:36,960 --> 00:03:38,720
这种方式真的是合理的吗

85
00:03:39,920 --> 00:03:40,520
另外的话

86
00:03:40,520 --> 00:03:44,280
如何通过计算图更高效的表示图呢

87
00:03:44,280 --> 00:03:46,640
现在只是把图变成一个矩阵

88
00:03:46,640 --> 00:03:48,720
然后通过计算图进行表达

89
00:03:48,720 --> 00:03:51,880
就是最高效和最合适的吗

90
00:03:51,880 --> 00:03:53,400
这是我的一个问题

91
00:03:53,400 --> 00:03:55,120
希望大家一起去思考的

92
00:03:55,120 --> 00:03:56,600
第二个就是数据

93
00:03:57,440 --> 00:04:01,280
数据的处理怎么样跟计算图进行融合呢

94
00:04:01,280 --> 00:04:03,520
其实现在很多数据的处理

95
00:04:03,520 --> 00:04:06,120
都是在CPU上面对数据进行处理

96
00:04:06,120 --> 00:04:07,320
处理完之后呢

97
00:04:07,320 --> 00:04:10,040
再丢给硬件或者计算图

98
00:04:10,040 --> 00:04:12,640
还有对应的AI芯片去执行的

99
00:04:12,640 --> 00:04:15,640
数据处理怎么跟计算图融合

100
00:04:15,640 --> 00:04:19,800
把数据也给AI芯片进行一起计算呢

101
00:04:19,800 --> 00:04:22,920
这是一个很具有挑战的工程性的问题

102
00:04:22,920 --> 00:04:27,040
第二个就是未来大数据和AI怎么融合

103
00:04:27,040 --> 00:04:28,200
如果融合的话

104
00:04:28,200 --> 00:04:30,360
计算图怎么表达

105
00:04:30,360 --> 00:04:35,480
Hadoop、HDFS、MapReduce这些大数据的技术

106
00:04:35,480 --> 00:04:36,800
怎么跟AI融合

107
00:04:36,800 --> 00:04:39,880
从而对计算图产生了一些新的表达

108
00:04:39,880 --> 00:04:41,840
或者新的范式要求

109
00:04:41,840 --> 00:04:44,520
这个可能也是一个需要去思考的

110
00:04:46,120 --> 00:04:49,040
另外一个就是比较偏工程性的一个问题

111
00:04:49,040 --> 00:04:50,480
就是部署态

112
00:04:50,520 --> 00:04:55,200
其实AI只能够说我作为一个处理的模块

113
00:04:55,200 --> 00:04:58,840
在整个流程里面作为其中一个方式

114
00:04:58,840 --> 00:05:02,120
这个图就是谷歌的Middle Pipe的一个方式

115
00:05:02,120 --> 00:05:05,600
我从Camera获取之后到最后用户呈现

116
00:05:05,600 --> 00:05:08,120
中间可能有一两个环节

117
00:05:08,120 --> 00:05:10,920
用了AI框架里面的AI功能

118
00:05:10,920 --> 00:05:11,880
像Detection

119
00:05:11,880 --> 00:05:14,280
然后画框或者跟踪

120
00:05:14,280 --> 00:05:19,680
用了实际上从图像的数据采集到最后的

121
00:05:19,680 --> 00:05:20,960
这是一套流程

122
00:05:20,960 --> 00:05:23,400
用计算图能表达这一套流程吗

123
00:05:23,400 --> 00:05:24,440
如果不行的话

124
00:05:24,440 --> 00:05:26,640
那我可能还得分开两个框架

125
00:05:26,640 --> 00:05:28,960
或者分开多个图进行表示

126
00:05:30,120 --> 00:05:32,680
最后一个就是科学计算

127
00:05:32,680 --> 00:05:35,840
虽然科学计算平时接触的比较少

128
00:05:35,840 --> 00:05:38,120
然后我也不是科学计算出身的

129
00:05:38,120 --> 00:05:41,080
我博士期间主要是研究自动化的

130
00:05:41,080 --> 00:05:43,160
科学计算实在是不太懂

131
00:05:43,160 --> 00:05:45,320
AI跟科学计算融合

132
00:05:45,320 --> 00:05:48,840
计算图这种表示能否满足呢

133
00:05:48,840 --> 00:05:50,640
下面这个图对分子

134
00:05:50,640 --> 00:05:51,640
对蛋白质

135
00:05:51,640 --> 00:05:54,240
对细胞进行表示

136
00:05:54,240 --> 00:05:58,240
计算图就能很好的表示这些概念和知识吗

137
00:05:58,240 --> 00:06:01,720
科学计算是有它自己的一套体系和范式的

138
00:06:01,720 --> 00:06:04,560
科学计算也存在了很久很多年了

139
00:06:04,560 --> 00:06:09,040
科学计算的范式如何更好地融合到计算图里面呢

140
00:06:09,040 --> 00:06:09,800
所以说

141
00:06:09,800 --> 00:06:12,640
计算图未来的研究方向领域

142
00:06:12,640 --> 00:06:15,920
或者计算图的范式和计算图的形态

143
00:06:15,960 --> 00:06:18,800
可能还会不断持续的演进和改变

144
00:06:18,800 --> 00:06:20,840
希望大家一起去多思考

145
00:06:20,840 --> 00:06:23,520
然后让让这个领域变得更好

146
00:06:24,640 --> 00:06:27,800
今天回顾了计算图跟AI框架的关系

147
00:06:27,800 --> 00:06:29,680
另外还展望了计算图的未来

148
00:06:29,680 --> 00:06:31,080
还新的应用场景

149
00:06:31,080 --> 00:06:33,920
对计算图的挑战和计算图未来

150
00:06:33,920 --> 00:06:36,240
可能演进的几个领域方向

151
00:06:37,240 --> 00:06:37,720
好了

152
00:06:37,720 --> 00:06:38,480
谢谢各位

153
00:06:38,480 --> 00:06:39,360
摆了个掰

154
00:06:39,360 --> 00:06:40,520
已经12点多了

155
00:06:41,360 --> 00:06:42,160
卷的不行了

156
00:06:42,160 --> 00:06:43,040
卷的不行了

157
00:06:43,040 --> 00:06:44,840
记得一键三连加关注哦

158
00:06:44,880 --> 00:06:47,920
所有的内容都会开源在下面这条链接里面

159
00:06:48,440 --> 00:06:49,240
摆了个掰

